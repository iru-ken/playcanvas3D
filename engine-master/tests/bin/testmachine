#!/usr/bin/python
import sys
import os
import getopt
import fnmatch

class Container(object): 
    pass

class TestMachine(object):
    '''
    TestMachine is used 
        * to create new tests for the PlayCanvas sdk
        * to create the all_tests.html file which runs all tests    
    '''
    
    _templates = Container()
    _templates.test_html = """<html>
    <head>
    </head>
    
    <body>
        <h1 id="qunit-header">[TEST_CASE_NAME]</h1>
        <h2 id="qunit-banner"></h2>
        <div id="qunit-testrunner-toolbar"></div>
        <h2 id="qunit-userAgent"></h2>
        <ol id="qunit-tests"></ol>
        <div id="qunit-fixture">test markup, will be hidden</div>

        <link rel="stylesheet" type="text/css" href="../qunit/qunit.css" />
        <script type="text/javascript" src="../qunit/qunit.js"></script>
        <script type="text/javascript" src="../qunit/jack.js"></script>
        [TEST_DEPENDENCIES]

        <!-- Source to test -->
        [TEST_SOURCE]
                
        <!-- Tests -->
        [TEST_SCRIPTS]
    </body>
    </html>
    """
    
    _templates.all_tests = """<html>
    <!-- This file is auto-generated by testmachine.py -->
    <head>
        <style type="text/css" media="screen">
            iframe {
                width: 100%;
                height: 200px;
            }
        </style>
    </head>
    
    <body>
        [TESTS]
    </body>
</html>
"""

    _templates.test_frame = """<div>
            <a href="[TEST_PATH]">[TEST_CASE_NAME]</a>
            <iframe src="[TEST_PATH]"></iframe> 
        </div>"""
    
    _templates.test_code = """module('[TEST_NAME]');

test("Sample Test", function () {
    var expected = 1;
    var result = 1;
    
    ok(true);
    equal(result, expected);
    strictEqual(result, expected);
});
"""
    def __init__(self, test_root, src_root):
        # The directory of all tests e.g. sdk/tests
        self._test_root = test_root
        # The directory of the sdk source e.g. sdk/src
        self._src_root = src_root
        
    def _to_valid_name(self, name):
        '''
        Convert a name given from the command-line into a name that can be used as part of a filepath
        '''
        
        name.replace(" ", "_").replace("'", "").replace("/", "_").replace("\\", "_").replace(":", "_")
            
        return name;
    
    def _to_html_filename(self, name):
        return "test_%s.html" % (name)
    
    def _to_source_filename(self, module, name):
        return "%s_%s.js" % (module, name)

    def _to_tests_filename(self, name):
        return "test_%s.js" % (name)
    
    def _to_script_tag(self, path):
        return '<script type="text/javascript" src="%s"></script>' % (path)
    
    def _create_case_html(self, path, case_name, dependencies, source, scripts):
        text = self._templates.test_html
        text = text.replace("[TEST_CASE_NAME]", case_name)
        
        dependencies_text = ""

        source_text = ""
        for file in source:
            source_text += self._to_script_tag(file)
            source_text += "\n\t\t"
        
        scripts_text = ""
        for file in scripts:
            scripts_text += self._to_script_tag(file)
            scripts_text += "\n\t\t"
        
        text = text.replace("[TEST_DEPENDENCIES]", dependencies_text)
        text = text.replace("[TEST_SOURCE]", source_text)            
        text = text.replace("[TEST_SCRIPTS]", scripts_text)
        
        f = open(path, "w");
        f.write(text)
        f.close()
    
    def _create_test_js(self, path, name):
        text = self._templates.test_code
        text = text.replace("[TEST_NAME]", name)
        
        f = open(path, "w")
        f.write(text)
        f.close()
          
    def create_test_case(self, name, module_names):
        '''
        Create a test case folder
        e.g. 
            name/
            name/test_name.html
            name/test_name.js
            name/test_module1.js
            name/test_module2.js
        '''
        
        name = self._to_valid_name(name)
        case_name = "sdk.tests.%s" % name
        module_names = [self._to_valid_name(n) for n in module_names]
        if not name in module_names:
            module_names.insert(0, name)
            
        dir = os.path.join(self._test_root, name)
        src_dir = os.path.join(self._src_root, name)
        
        htmlPath = os.path.join(dir, self._to_html_filename(name))
        dependencies = []
        source = [os.path.join(src_dir, self._to_source_filename(name, n)) for n in module_names]
        scripts = [self._to_tests_filename(n) for n in module_names]

        if not os.path.exists(dir):
            os.mkdir(dir)
        
        if os.path.exists(htmlPath):
            os.remove(htmlPath)
            
        self._create_case_html(htmlPath, case_name, dependencies, source, scripts)
        
        for i, script in enumerate(scripts):
            test_name = "sdk.tests.%s.%s" % (name, module_names[i])
            self._create_test_js(os.path.join(dir, script), test_name)
            
    def create_all_tests_page(self):
        # string containing all test divs/iframes
        tests_block = ""
        
        dir = os.path.join(os.getcwd(), self._test_root)
        results = []
        
        for root, dirs, files in os.walk(dir):
            htmls = fnmatch.filter(files, '*.html')
            htmls = [results.append((os.path.split(root)[1], os.path.join(os.path.split(root)[1],file))) for file in htmls]
            
        for result in results:
            if result[0]:
                test_name = "sdk.tests.%s" % (result[0])
                tests_block += self._templates.test_frame.replace("[TEST_PATH]", result[1]).replace("[TEST_CASE_NAME]", test_name)
        
        f = open(os.path.join(self._test_root, "all_tests.html"), "w")
        f.write(self._templates.all_tests.replace("[TESTS]", tests_block))
        f.close()

        
cmd = None
try:
    opts, args = getopt.getopt(sys.argv[2:], "n:d:", ["namespaces=", "directory="])
    src_dir = "../../src"
    cmd = sys.argv[1]
except getopt.GetoptError, err:
    print(str(err))
except Exception, err:
    print(str(err))

if cmd == "test":
    namespaces = []
    module = args[0]
    for (o,a) in opts:
        if o == "-d" or o == "--directory":
            src_dir = a
        if o == "-n" or o == "--namespaces":
            namespaces = a.split(",")
    t = TestMachine("", src_dir)
    t.create_test_case(module, namespaces)
elif cmd == "generate":
    for (o,a) in opts:
        if o == "-d" or o == "--directory":
            src_dir = a
    t = TestMachine("", src_dir)
    t.create_all_tests_page()
    